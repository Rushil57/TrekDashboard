@using DevExtreme.AspNet.Mvc;
@using SCE.Web.DataUtil.Dto;
@using SCE.Web.Models;
@model SCE.Web.Models.SCEViewModel
@{
    ViewBag.Title = "SCEViewDetails Page";
}

<style type="text/css">
    .form-inline .input-group {
        width: auto;
    }
</style>
<div class="h1" style="margin-bottom:5%">Sales Cycle Estimate</div>
<div class="h2" style="margin-bottom:5%">Model Name: SCE 5 (11)</div>
<div class="pannel">
    @(Html.DevExtreme().Accordion()
                                                                                                                                                               .ID("BaseExtendedSCEAccordion")

                                                                                                                                                               .DataSource(new[] { new { title = "Base SCE and Extended SCEs" } })
                                                                                                                                                               .Collapsible(true)
                                                                                                                                                               .DeferRendering(true)
                                                                                                                                                               .Multiple(true)
                                                                                                                                                               .AnimationDuration(300)
                                                                                                                                                               .ItemTemplate(@<text>
                                                                                                                                                                @BaseExtendedSCEPnl()
                                                                                                                                                            </text>)
    )
</div>

@helper BaseExtendedSCEPnl()
{
    <div class="chart-div">
        @(Html.DevExtreme().Chart()
                                   .ID("line-chart")
                                   .Palette(VizPalette.Violet)
                                   .CommonSeriesSettings(s => s
                                       .ArgumentField("Shares")
                                       .Type(SeriesType.Line)
                                   )
                                   .Margin(m => m.Bottom(20))
                                   .ArgumentAxis(a => a
                                       .ValueMarginsEnabled(false)
                                       .DiscreteAxisDivisionMode(DiscreteAxisDivisionMode.CrossLabels)
                                       .Grid(g => g.Visible(true))
                                   )
                                   .Series(s =>
                                   {
                                       s.Add().ValueField("SunilHighTech").Name("Sunil High-Tech LTD.");
                                       s.Add().ValueField("Infosys").Name("Infosys LTD");
                                       s.Add().ValueField("RIL").Name("Relicance Industry LTD.");
                                       s.Add().ValueField("Rcom").Name("Relicance Communication");
                                       s.Add().ValueField("IDFC").Name("IDFC");
                                   })
                                   .Legend(l => l
                                       .VerticalAlignment(VerticalEdge.Bottom)
                                       .HorizontalAlignment(HorizontalAlignment.Center)
                                       .ItemTextPosition(Position.Bottom)
                                   )
                                   .Title(t => t
                                       .Text("SCE Line chart 1")
                                       .Subtitle(s => s.Text("(Data Analysis of project 1)"))
                                   )
                                   .Export(e => e.Enabled(true))
                                   .Tooltip(t => t
                                       .Enabled(true)
                                       .CustomizeTooltip(@<text>
                                        function (arg) {
                                        return {
                                        text: arg.valueText
                                        };
                                        }
                                    </text>)
                                                             )
                                                             .DataSource(new List<object> {
                  new { Shares = "2001", SunilHighTech = 1.60, Infosys = 100.6, RIL = 582, Rcom = 564.3, IDFC = 187.9 },
                  new { Shares = "2002", SunilHighTech = 50.2, Infosys = 308.6, RIL = 35.1, Rcom = 956.9, IDFC = 11.3 },
                  new { Shares = "2003", SunilHighTech = 400, Infosys = 128.5, RIL = 361.8, Rcom = 105, IDFC = 32.4 },
                  new { Shares = "2004", SunilHighTech = 430.6, Infosys = 241.5, RIL = 64.9, Rcom = 120.8, IDFC = 64.8 },
                  new { Shares = "2005", SunilHighTech = 480, Infosys = 119.3, RIL = 28.9, Rcom = 204.8, IDFC = 3.8 },
                  new { Shares = "2006", SunilHighTech = 1010.1, Infosys = 123.6, RIL = 77.3, Rcom = 85.7, IDFC = 37.8 }
                                                             })
        )
    </div>
}

@*Close Book *@
<div class="pannel">
    @(Html.DevExtreme().Accordion()
                                                                                                                                                               .ID("CompareSCEModelsAccordion")
                                                                                                                                                               .DataSource(new[] {
new { title = "Compare SCE Models ", }})
                                                                                                                                                               .Collapsible(true)
                                                                                                                                                               .DeferRendering(false)
                                                                                                                                                               .Multiple(true)
                                                                                                                                                               .ItemTemplate(@<text>
                                                                                                                                                                @CompareSCEModelsPnl()
                                                                                                                                                            </text>)
    )
</div>

@helper CompareSCEModelsPnl()
{
    /**/
    <div class="content-title">Select up to 4 models to compare to this model.</div>
    <div style="margin-top:10px;">
        <div class="row" style="margin-top:10px;">
            <div class="col-md-2" style="padding-top:10px;">
                <span style="font-size:15px;">SCE Model to compare to</span>
            </div>
            <div class="col-md-3">
                @*@(Html.DevExtreme().DropDownBox().ID("selectBoxSCEModelCompare")
                                    .DataSource(Model.SCECompareToList)
                                    .ValueExpr("Id")
                                    .DisplayExpr("Name")
                                    .ContentTemplate(new TemplateName("EmbeddedDataGridMultiple"))
        )*@

                <div id="hdnlistBUDataCnt" class="hidden-div"> @Html.Raw(Model.Datasource) </div>

                <div id="treeBox"></div>

            </div>

            <div class="col-md-3">
                @(Html.DevExtreme().Button().ID("btnGoSCECompare").Text("Go").ElementAttr(new { @class = "from-input" }))
            </div>
        </div>
        <div class="chart-div">
            @(Html.DevExtreme().Chart()
                               .ID("line-chart")
                               .Palette(VizPalette.Violet)
                               .CommonSeriesSettings(s => s
                                   .ArgumentField("Country")
                                   .Type(SeriesType.Line)
                               )
                               .Margin(m => m.Bottom(20))
                               .ArgumentAxis(a => a
                                   .ValueMarginsEnabled(false)
                                   .DiscreteAxisDivisionMode(DiscreteAxisDivisionMode.CrossLabels)
                                   .Grid(g => g.Visible(true))
                               )
                               .Series(s =>
                               {
                                   s.Add().ValueField("Hydro").Name("Hydro-electric");
                                   s.Add().ValueField("Oil").Name("Oil");
                                   s.Add().ValueField("Gas").Name("Natural gas");
                                   s.Add().ValueField("Coal").Name("Coal");
                                   s.Add().ValueField("Nuclear").Name("Nuclear");
                               })
                               .Legend(l => l
                                   .VerticalAlignment(VerticalEdge.Bottom)
                                   .HorizontalAlignment(HorizontalAlignment.Center)
                                   .ItemTextPosition(Position.Bottom)
                               )
                               .Title(t => t
                                   .Text("SCE Line chart 2")
                                   .Subtitle(s => s.Text("(Data Analysis of project 2)"))
                               )
                               .Export(e => e.Enabled(true))
                               .Tooltip(t => t
                                   .Enabled(true)
                                   .CustomizeTooltip(@<text>
                                    function (arg) {
                                    return {
                                    text: arg.valueText
                                    };
                                    }
                                </text>)
                                 )
                                 .DataSource(new List<object> {
              new { Country = "USA", Hydro = 0.0, Oil = 937.6, Gas = 582, Coal = 564.3, Nuclear = 187.9 },
              new { Country = "China", Hydro = 400.0, Oil = 308.6, Gas = 35.1, Coal = 956.9, Nuclear = 11.3 },
              new { Country = "Russia", Hydro = 0.0, Oil = 128.5, Gas = 361.8, Coal = 105, Nuclear = 32.4 },
              new { Country = "Japan", Hydro = 200.0, Oil = 241.5, Gas = 64.9, Coal = 120.8, Nuclear = 64.8 },
              new { Country = "India", Hydro = 0.0, Oil = 119.3, Gas = 28.9, Coal = 204.8, Nuclear = 3.8 },
              new { Country = "Germany", Hydro = 200.0, Oil = 123.6, Gas = 77.3, Coal = 85.7, Nuclear = 37.8 }
                                 })
            )
        </div>
    </div>

    <div style="margin-top:10px;">
        <div class="row" style="margin-top:10px;">
            <div class="col-md-2" style="padding-top:10px;">
                <span style="font-size:15px;">Extended SCE Days</span>
            </div>
            <div class="col-md-3">
                @(Html.DevExtreme().SelectBox().ID("selectBoxExtendedSCEDays"))
            </div>
            <div class="col-md-3">
                @(Html.DevExtreme().Button().ID("btnGoSCEDays").Text("Go").ElementAttr(new { @class = "from-input" }))
            </div>
        </div>
        <div class="chart-div">
            @(Html.DevExtreme().Chart()
                                       .ID("line-chart")
                                       .Palette(VizPalette.Violet)
                                       .CommonSeriesSettings(s => s
                                           .ArgumentField("Country")
                                           .Type(SeriesType.Line)
                                       )
                                       .Margin(m => m.Bottom(20))
                                       .ArgumentAxis(a => a
                                           .ValueMarginsEnabled(false)
                                           .DiscreteAxisDivisionMode(DiscreteAxisDivisionMode.CrossLabels)
                                           .Grid(g => g.Visible(true))
                                       )
                                       .Series(s =>
                                       {
                                           s.Add().ValueField("Hydro").Name("Hydro-electric");
                                           s.Add().ValueField("Oil").Name("Oil");
                                           s.Add().ValueField("Gas").Name("Natural gas");
                                           s.Add().ValueField("Coal").Name("Coal");
                                           s.Add().ValueField("Nuclear").Name("Nuclear");
                                       })
                                       .Legend(l => l
                                           .VerticalAlignment(VerticalEdge.Bottom)
                                           .HorizontalAlignment(HorizontalAlignment.Center)
                                           .ItemTextPosition(Position.Bottom)
                                       )
                                       .Title(t => t
                                           .Text("SCE Line chart 3")
                                           .Subtitle(s => s.Text("(Data Analysis of project 1)"))
                                       )
                                       .Export(e => e.Enabled(true))
                                       .Tooltip(t => t
                                           .Enabled(true)
                                           .CustomizeTooltip(@<text>
                                            function (arg) {
                                            return {
                                            text: arg.valueText
                                            };
                                            }
                                        </text>)
                                          )
                                          .DataSource(new List<object> {
               new { Country = "USA", Hydro = 59.8, Oil = 937.6, Gas = 582, Coal = 564.3, Nuclear = 187.9 },
               new { Country = "China", Hydro = 74.2, Oil = 308.6, Gas = 35.1, Coal = 956.9, Nuclear = 11.3 },
               new { Country = "Russia", Hydro = 40, Oil = 128.5, Gas = 361.8, Coal = 105, Nuclear = 32.4 },
               new { Country = "Japan", Hydro = 22.6, Oil = 241.5, Gas = 64.9, Coal = 120.8, Nuclear = 64.8 },
               new { Country = "India", Hydro = 19, Oil = 119.3, Gas = 28.9, Coal = 204.8, Nuclear = 3.8 },
               new { Country = "Germany", Hydro = 6.1, Oil = 123.6, Gas = 77.3, Coal = 85.7, Nuclear = 37.8 }
                                          })
            )
        </div>
    </div>


}
<br />

@(Html.DevExtreme().Button().ID("btnSave").Text("Back").ElementAttr(new { @class = "from-input" }))
@(Html.DevExtreme().Button().ID("btnPrint").Text("Print").ElementAttr(new { @class = "from-input" }))

<script type="text/javascript">
    $(document).ready(function () {
        var selectBoxData = [
            { "name": "Alabama", "capital": "Montgomery" },
            { "name": "Alaska", "capital": "Juneau" },
            { "name": "Arizona", "capital": "Phoenix" }
        ]

        //$("#selectBoxSCEModelCompare").dxSelectBox({
        //    dataSource: selectBoxData,
        //    valueExpr: 'capital',
        //    displayExpr: 'name',
        //    searchEnabled: true,
        //    onOpened: function (ev) {
        //        setTimeout(function () { ev.component.content().parent().width(200) });
        //    }
        //});







        //$("#selectBoxExtendedSCE").dxSelectBox({
        //    dataSource: selectBoxData,
        //    valueExpr: 'capital',
        //    displayExpr: 'name',
        //    searchEnabled: true,
        //    onOpened: function (ev) {
        //        setTimeout(function () { ev.component.content().parent().width(200) });
        //    }
        //});

    });

    function CreateBUDropdown() {
        var treeView, dataGrid, value;
        var arr1 = [];
        var syncTreeViewSelection = function (treeView, value) {
            if (!value) {
                treeView.unselectAll();
                return;
            }

            value.forEach(function (key) {
                treeView.selectItem(key);
            });
        };
        var makeAsyncDataSourceTest = $("#hdnlistBUDataCnt").html();
        var makeAsyncDataSource = JSON.parse(makeAsyncDataSourceTest);
        //var placeholderValueInit = "BU (" + makeAsyncDataSource.length + " of " + makeAsyncDataSource.length + " selected)";
        //if (placeholderValueInit == undefined || placeholderValueInit == null || placeholderValueInit == "") {
        //    placeholderValueInit = "BU";
        //}

        try {
            $("#treeBox").dxDropDownBox("dispose");
            $("#treeBox").remove();
            $("#treeBox_prnt").html("<div id='treeBox'></div>");
        } catch (e) {

        }

        //$("#treeBox").html('');   
        $("#treeBox").dxDropDownBox({
            //value: ["1_1"],
            valueExpr: "Id",
            displayExpr: "Name",
            placeholder: "Select value",
            showClearButton: true,
            dataSource: makeAsyncDataSource,
            accessKey: "LegacyBU",
            contentTemplate: function (e) {
                var value = e.component.option("value"),
                    $treeView = $("<div>").dxTreeView({
                        dataSource: e.component.option("dataSource"),
                        dataStructure: "plain",
                        keyExpr: "Id",
                        //parentIdExpr: "categoryId",
                        selectionMode: "multiple",
                        displayExpr: "Name",
                        selectByClick: true,
                        onContentReady: function (args) {
                            syncTreeViewSelection(args.component, value);
                            //args.component.selectAll(4);
                            //var test = args.component.selectRows();
                            //alert(test);
                        },
                        selectNodesRecursive: false,
                        showCheckBoxesMode: "normal",
                        onItemSelectionChanged: function (args) {
                            value = args.component.getSelectedNodesKeys();
                                //args.component.selectedItem = args.itemData
                            var currentKey = args.component.selectedItem = args.itemData
                            
                            if (value.length > 4) {
                                alert("only 4 selection allowd : selected ID  :" + currentKey.Id)
                                treeView.unselectItem(currentKey.Id);
                                
                            }
                            e.component.option("value", value);
                        }
                    });

                treeView = $treeView.dxTreeView("instance");

                e.component.on("valueChanged", function (args) {

                    var value = args.value;
                    var text = args.text;
                    syncTreeViewSelection(treeView, value);
                    updatePlaceholderForBU();
                    btnFiltersClick(args);
                    //UpdateAccountSearchData(value);

                });

                return $treeView;
            }
        });

    }


    $(function () {
        CreateBUDropdown();
    });

    function gridBox_valueChanged(e) {
        var $dataGrid = $("#embedded-datagrid");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
</script>